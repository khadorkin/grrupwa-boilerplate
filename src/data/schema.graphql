schema {
  query: Query
  mutation: Mutation
}

type Faction implements Node {
  id: ID!
  factionId: String
  name: String
  ships(after: String, first: Int, before: String, last: Int): ShipConnection
}

input IntroduceShipInput {
  shipName: String!
  factionId: ID!
  clientMutationId: String!
}

type IntroduceShipPayload {
  newShipEdge: ShipEdge
  faction: Faction
  clientMutationId: String!
}

type Mutation {
  introduceShip(input: IntroduceShipInput!): IntroduceShipPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  factions(names: [String]): [Faction]
  node(id: ID!): Node
}

type Ship implements Node {
  id: ID!
  name: String
}

type ShipConnection {
  pageInfo: PageInfo!
  edges: [ShipEdge]
}

type ShipEdge {
  node: Ship
  cursor: String!
}
